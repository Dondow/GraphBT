/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.be.textbe.bt.textbt.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.be.textbe.bt.textbt.util.TextbtAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TextbtItemProviderAdapterFactory extends TextbtAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TextbtItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.TextBT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextBTItemProvider textBTItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.TextBT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextBTAdapter() {
		if (textBTItemProvider == null) {
			textBTItemProvider = new TextBTItemProvider(this);
		}

		return textBTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.RequirementList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementListItemProvider requirementListItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.RequirementList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementListAdapter() {
		if (requirementListItemProvider == null) {
			requirementListItemProvider = new RequirementListItemProvider(this);
		}

		return requirementListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.ComponentList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentListItemProvider componentListItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.ComponentList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentListAdapter() {
		if (componentListItemProvider == null) {
			componentListItemProvider = new ComponentListItemProvider(this);
		}

		return componentListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.SystemComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemComponentItemProvider systemComponentItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.SystemComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemComponentAdapter() {
		if (systemComponentItemProvider == null) {
			systemComponentItemProvider = new SystemComponentItemProvider(this);
		}

		return systemComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.OptionList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionListItemProvider optionListItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.OptionList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionListAdapter() {
		if (optionListItemProvider == null) {
			optionListItemProvider = new OptionListItemProvider(this);
		}

		return optionListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.BehaviorTree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorTreeItemProvider behaviorTreeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.BehaviorTree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorTreeAdapter() {
		if (behaviorTreeItemProvider == null) {
			behaviorTreeItemProvider = new BehaviorTreeItemProvider(this);
		}

		return behaviorTreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.RelationalBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationalBehaviorItemProvider relationalBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.RelationalBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationalBehaviorAdapter() {
		if (relationalBehaviorItemProvider == null) {
			relationalBehaviorItemProvider = new RelationalBehaviorItemProvider(this);
		}

		return relationalBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Selection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionItemProvider selectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Selection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAdapter() {
		if (selectionItemProvider == null) {
			selectionItemProvider = new SelectionItemProvider(this);
		}

		return selectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Guard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardItemProvider guardItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Guard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardAdapter() {
		if (guardItemProvider == null) {
			guardItemProvider = new GuardItemProvider(this);
		}

		return guardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.InternalInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalInputItemProvider internalInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.InternalInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalInputAdapter() {
		if (internalInputItemProvider == null) {
			internalInputItemProvider = new InternalInputItemProvider(this);
		}

		return internalInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.InternalOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalOutputItemProvider internalOutputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.InternalOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalOutputAdapter() {
		if (internalOutputItemProvider == null) {
			internalOutputItemProvider = new InternalOutputItemProvider(this);
		}

		return internalOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.ExternalInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalInputItemProvider externalInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.ExternalInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalInputAdapter() {
		if (externalInputItemProvider == null) {
			externalInputItemProvider = new ExternalInputItemProvider(this);
		}

		return externalInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.ExternalOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalOutputItemProvider externalOutputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.ExternalOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalOutputAdapter() {
		if (externalOutputItemProvider == null) {
			externalOutputItemProvider = new ExternalOutputItemProvider(this);
		}

		return externalOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Assertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertionItemProvider assertionItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Assertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertionAdapter() {
		if (assertionItemProvider == null) {
			assertionItemProvider = new AssertionItemProvider(this);
		}

		return assertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.SequentialNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialNodeItemProvider sequentialNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.SequentialNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialNodeAdapter() {
		if (sequentialNodeItemProvider == null) {
			sequentialNodeItemProvider = new SequentialNodeItemProvider(this);
		}

		return sequentialNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.AtomicNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicNodeItemProvider atomicNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.AtomicNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicNodeAdapter() {
		if (atomicNodeItemProvider == null) {
			atomicNodeItemProvider = new AtomicNodeItemProvider(this);
		}

		return atomicNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.ParallelBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelBlockItemProvider parallelBlockItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.ParallelBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelBlockAdapter() {
		if (parallelBlockItemProvider == null) {
			parallelBlockItemProvider = new ParallelBlockItemProvider(this);
		}

		return parallelBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.textbt.AlternativeBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeBlockItemProvider alternativeBlockItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.textbt.AlternativeBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeBlockAdapter() {
		if (alternativeBlockItemProvider == null) {
			alternativeBlockItemProvider = new AlternativeBlockItemProvider(this);
		}

		return alternativeBlockItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (textBTItemProvider != null) textBTItemProvider.dispose();
		if (requirementListItemProvider != null) requirementListItemProvider.dispose();
		if (requirementItemProvider != null) requirementItemProvider.dispose();
		if (componentListItemProvider != null) componentListItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (systemComponentItemProvider != null) systemComponentItemProvider.dispose();
		if (optionListItemProvider != null) optionListItemProvider.dispose();
		if (optionItemProvider != null) optionItemProvider.dispose();
		if (behaviorTreeItemProvider != null) behaviorTreeItemProvider.dispose();
		if (relationalBehaviorItemProvider != null) relationalBehaviorItemProvider.dispose();
		if (relationItemProvider != null) relationItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (selectionItemProvider != null) selectionItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (guardItemProvider != null) guardItemProvider.dispose();
		if (internalInputItemProvider != null) internalInputItemProvider.dispose();
		if (internalOutputItemProvider != null) internalOutputItemProvider.dispose();
		if (externalInputItemProvider != null) externalInputItemProvider.dispose();
		if (externalOutputItemProvider != null) externalOutputItemProvider.dispose();
		if (assertionItemProvider != null) assertionItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (sequentialNodeItemProvider != null) sequentialNodeItemProvider.dispose();
		if (atomicNodeItemProvider != null) atomicNodeItemProvider.dispose();
		if (parallelBlockItemProvider != null) parallelBlockItemProvider.dispose();
		if (alternativeBlockItemProvider != null) alternativeBlockItemProvider.dispose();
	}

}
