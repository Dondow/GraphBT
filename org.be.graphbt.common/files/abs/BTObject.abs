module BTObjects;
export *;
import * from ExceptionModule;
import * from ABS.FLI;

data State = Ready | Blocked | Running | Exit | Idle;
data BehaviorType = INTERNALINPUT | INTERNALOUTPUT | EXTERNALINPUT | EXTERNALOUTPUT | GUARD | SELECTION | STATE;
data Operator = REVERSION | REFERENCE | SYNCHRONIZATION | NOOPERATOR | BRANCHKILL;
data DataType = INT | STRING | BOOL;

def Operator operatorFromString(String rs) = 
case rs {
	"REVERSION" => REVERSION;
	"REFERENCE" => REFERENCE;
	"SYNCHRONIZATION" => SYNCHRONIZATION;
	"BRANCHKILL" => BRANCHKILL;
	_ => NOOPERATOR;
};

def BehaviorType behaviorTypeFromString(String rs) = 
case rs {
	"INTERNALINPUT" => INTERNALINPUT;
	"INTERNALOUTPUT" => INTERNALOUTPUT;
	"EXTERNALINPUT" => EXTERNALINPUT;
	"EXTERNALOUTPUT" => EXTERNALOUTPUT;
	"GUARD" => GUARD;
	"SELECTION" => SELECTION ;
	_ => STATE ;
};

interface ArrayNode {
	Int getLength();
	Unit setLength(Int a);
	Unit set(Int i, N d);
	Unit init(List<N> l);
	N getElement(Int i);
}

class ArrayNodeImpl() implements ArrayNode {
	Int length = 0;
	Map<Int,Maybe<N>> map = EmptyMap;
	Unit setLength(Int len) {
		if(length == 0) {
			length = len;
		} else {
			String errorMessage = "Array size is unmodifiable as it is already been set";
		}
	}
	
	Int getLength() {
		return length;
	}
	
	Unit set(Int index,N d) {
		if(index>=0 && index<length) {
			map = put(map,index,Just(d));
		} else {
			Exception e = new ArrayIndexOutOfBoundException();
		}
	}
	
	N getElement(Int index) {
		N ret = null;
		if(index>=0 && index<length) {
			Maybe<N> m = lookupDefault(map,index,Nothing);
			if(isJust(m)) {
				ret = fromJust(m);
			}
		} else {
			Exception e = new ArrayIndexOutOfBoundException();
		}
		return ret;
	}
	
	Unit init(List<N> intList) {
		this.setLength(length(intList));
		List<N> temp = intList;
		Int index = 0;
		while(temp != Nil) {
			this.set(index, head(temp));
			index=index+1;
			temp = tail(temp);
		}
	}
}

interface QueueNode {
	N poll();
	Unit insert(N a);
	Unit init(List<N> l);
	Int size();
	ArrayNode toArray();
}

class QueueNodeImpl implements QueueNode {
	ArrayNode arr;
	Int top = 0;
	Int bottom = 0;
	Int size = 0;
	
	N poll() {
		N d = null;
		if(size > 0) {
			Int length = arr.getLength();
			d = arr.getElement(bottom);
			
			bottom = bottom + 1;
			size = size - 1;
			if(bottom == length) {
				bottom = 0;
			}
		} else {
			Exception e = new NullPointerException();
		}
		return d;
	}
	
	Unit insert(N i) {
		if(arr == null)
			this.run();
		Int length = arr.getLength();
		size = size + 1;
		if(size > length-1) {
			this.doubleSize();
		}
		length = arr.getLength();
		arr.set(top,i);
		top = top + 1;
		if(top == length) {
			top = 0;
		}
	}
	
	Unit run() {
		if(arr == null) {
			arr = new ArrayNodeImpl();
			arr.setLength(10);
		}
	}
	
	Unit init(List<N> l) {
		while(l!=Nil) {
			this.insert(head(l));
			l = tail(l);
		}
	}
	
	Int size() {
		return size;
	}
	
	Unit doubleSize() {
		Int length = arr.getLength();
		length = length*2;
		ArrayNode arrT = new ArrayNodeImpl();
		arrT.setLength(length);
		if(bottom > top) {
			Int i = 0;
			while(i < top) {
				N d = arr.getElement(i);
				arrT.set(i,d);
				i = i+1;
			}
			i = length;
			while(i > bottom) {
				N d = arr.getElement(i);
				arrT.set(length-i-1,d);
				i = i-1;
			}
			bottom = i;
		} else {
			Int i = 0;
			while(i < top) {
				N d = arr.getElement(i);
				arrT.set(i,d);
				i = i+1;
			}
		}
		arr = arrT;
	}
	
	ArrayNode toArray() {
		ArrayNode temp = new ArrayNodeImpl();
		Int length = this.size();
		String str = intToString(length);
		temp.setLength(length);
		Int i = bottom;
		Int j = 0;
		while(j < size) {
			N ith = arr.getElement(i);
			temp.set(j,ith);
			i = i+1;
			j = j+1;
			if(i==length) {
				i=0;
			}
		}
		return temp;
	}
}

interface Variable {
	DataType getDataType();
	Unit setDataType(DataType dataType);
	String getName();
	Unit setName(String name);
	Unit setStringValue(String value);
	Bool getBoolValue();
	Unit setBoolValue(Bool value);
	Int getIntValue();
	Unit setIntValue(Int value);
	String getStringValue();
}

class VariableImpl() implements Variable{
	DataType dataType = STRING;
	String name = "VAR_NAME";
	Int intValue = 0;
	Bool boolValue = False;
	String stringValue = "";
	DataType getDataType() {
		return dataType;
	}
	
	Unit setDataType(DataType dataType) {
		this.dataType = dataType;
	}
	
	String getName() {
		return name;
	}
	
	Unit setName(String name) {
		this.name = name;
	}
	
	Unit setStringValue(String value) {
		stringValue = value;
	}
	
	Unit setIntValue(Int value) {
		intValue = value;
	}
	
	Unit setBoolValue(Bool value) {
		boolValue = value;
	}
	
	Bool getBoolValue() {
		return boolValue;
	}
	
	Int getIntValue() {
		return intValue;
	}
	
	String getStringValue() { 
		return stringValue;
	}
}
interface ComponentState {
	String getName();
	Unit setName(String n);
	List<Variable> getVars();
	Unit setVars(List<Variable> vars);
	Unit addVariable(Variable v);
}

class ComponentStateImpl implements ComponentState {
	String name = "STATE";
	List<Variable> vars = Nil;
	
	String getName() {
		return name;
	}
	
	Unit setName(String n) {
		name = n;
	}
	
	List<Variable> getVars() {
		return vars;
	}
	
	Unit setVars(List<Variable> vars) {
		this.vars = vars;
	}
	
	Unit addVariable(Variable var) {
		vars = Cons(var, vars);
	}
}

interface Component {
	Bool isTerminated();
	Bool isBlocked();
	Unit runMethod(String command);
	String getId();
	Unit setComponentState(String s);
	Bool isClicked();
	Unit click();
	Bool isPressed();
	Unit press();
	Bool isReleased();
	Unit release();
}

interface NodeBlock {
	Int getId();
	NodeBlock getParent();
	Unit setParent(NodeBlock o);
	Bool isAncestor(NodeBlock o);
}

class NodeBlockImpl implements NodeBlock {
	NodeBlock parent = null;
	Int id = 0;
	NodeBlock getParent() {
		return parent;
	}
	
	Unit setParent(NodeBlock p) {
		this.parent = p;
	}
	
	Int getId() {
		return id;
	}
	
	Bool isAncestor(NodeBlock nb) {
		Bool ancestor = False;
		IO io = new IOImpl();
		if(this.parent != null) {
			if (this.parent == nb){
				ancestor = True;
			} else {
				NodeBlock parent = nb.getParent();
				if(parent!=null) {
					ancestor = this.isAncestor(parent);
				}
			}
		}
		return ancestor;
	}
}

interface N {
	Unit runNode();
	String getPC();
	List<N> getNodes();
	Unit addNode(N node);
	Unit setNodeBlock(NodeBlock nb);
	State getState();
	Unit setState(State s);
	Bool isBlocked();
	BehaviorType getBehaviorType();
	Bool isTerminated();
	Operator getOperator();
	NodeBlock getNodeBlock();
	String getBlockType();
}

class Node(Component c, String cmd, String t, BehaviorType nt, Operator op, String pc) implements N {
	State state = Idle;
	NodeBlock nb;
	Component comp = c;
	String command = cmd;
	String tipe = t;
	String pC= pc;
	BehaviorType behaviorType = nt;
	Operator operator = op;
    List<N> nodes= Nil;
	List<N> getNodes() {
		return nodes;
	}
	
	Unit addNode(N node) {
		nodes = appendright(nodes,node);
	}
	
	Bool isBlocked() {
		Bool ret = False;
		if(behaviorType==GUARD) {
			ret = comp.isBlocked();
		}
		return ret;
	}
	
	Bool isTerminated() {
		Bool ret = False;
		if(behaviorType==SELECTION) {
			ret = comp.isTerminated();
		}
		return ret;
	}
	
	Unit runNode() {
		if(comp!=null) {
			comp.runMethod(command);
		}
	}
	
	String getPC() {
		return pC;
	}
	
	Unit setNodeBlock(NodeBlock nb) {
		this.nb = nb;
	}
	
	NodeBlock getNodeBlock() {
		return nb;
	}
	
	State getState() {
		return state;
	}
	
	Unit setState(State s) {
		state = s;
	}
	
	BehaviorType getBehaviorType() {
		return behaviorType;
	}
	
	Operator getOperator() {
		return operator;
	}
	
	String getBlockType() {
		return tipe;
	}
}

interface ProcessManager {
	
}

interface IO {
   String print(String msg);
   Int readInt();
   String readString();
}
[Foreign]
class IOImpl implements IO
{
	String print(String msg){
		return "this is the default implementation";
	}
	Int readInt(){
		return 0;
	}
	String readString()
	{
		return "";
	}
}
class ProcessManagerImpl(N r) implements ProcessManager {
	QueueNode readyQueue = null; /** Queue to handle ready states */
	QueueNode blockedQueue = null; /** Queue to handle blocked states */
	N rNode = r;

	/**
     * Routine that handles the execution of ready process
	 */
	Unit readyProcess() {
		Int size = readyQueue.size();
		while(not(size == 0)){
			N n = readyQueue.poll();
			String rs = n.getPC();
			State state = n.getState();
			if(state != Exit) {
				Operator op = n.getOperator();
				if(op == NOOPERATOR) {
					n.setState(Running);
					BehaviorType nt = n.getBehaviorType();
					if(nt == STATE) {
						Fut<Unit> f = n!runNode();
						this.evaluateChildNodes(n);
						await f?;
					} else if (nt == SELECTION) {
						n.runNode();
						Bool isTerminated = n.isTerminated();
						if(not(isTerminated)) {
							this.evaluateChildNodes(n);
						}
					} else if (nt == EXTERNALOUTPUT) {
						n.runNode();
						this.evaluateChildNodes(n);
					}
				} else if(op == REVERSION) {
					List<N> l = n.getNodes();	//reversion node must having a child target
					N target = head(l);
					 
					NodeBlock nb = target.getNodeBlock();
					NodeBlock nbOwn = n.getNodeBlock();
					if(nb!=nbOwn) {
						ArrayNode nodes = readyQueue.toArray();
						Int i = 0;
						Int k = 0;
						if(nodes!=null) 
							k = nodes.getLength();
						while(i < k) {
							N node = nodes.getElement(i);	
							String pcc = node.getPC();
							NodeBlock nbN = node.getNodeBlock();
							Bool isAncestor = nbN.isAncestor(nb);
							if(isAncestor) {
								node.setState(Exit);
							}
							i = i+1;
						}
						nodes = blockedQueue.toArray();
						i = 0;
						k = 0;
						if(nodes!=null) 
						k=nodes.getLength();
						while(i < k) {
							N node = nodes.getElement(i);
							NodeBlock nbN = node.getNodeBlock();
							Bool isAncestor = nbN.isAncestor(nb);
							if(isAncestor) {
								node.setState(Exit);
							}
							i = i+1;
						}
					}
					this!evaluateChildNodes(n);
				}
				n.setState(Exit);
			}
			suspend;
			size = readyQueue.size();
		}
	}
	
	/**
	 * Routine that handles blocked process
	 */
	Unit evaluateBlockedProcess() {
		Int size = blockedQueue.size();
		IO io = new IOImpl();
		while(not(size == 0)) {
			N n = blockedQueue.poll();
			State state = n.getState();
			if(state != Exit) {
				n.runNode();
				Bool b = n.isBlocked();
				if(not(b)) {
					io.print("Not blocked");
					this.evaluateChildNodes(n);
				} else {
					//io.print("Blocked");
					n.setState(Blocked);
					blockedQueue.insert(n);
				}
			}
			suspend;
			size = blockedQueue.size();
		}
	}
	
	Unit processAlternateBlock(N n) {
		QueueNode alternateQueue = new QueueNodeImpl(); /** Queue to handle blocked states */
		List<N> l = n.getNodes();
		Bool break = False;
		while(l != Nil && not(break)) {
			N c = head(l);
			l = tail(l);
			BehaviorType ntype = c.getBehaviorType();
			if(ntype == STATE||ntype==INTERNALOUTPUT||ntype==EXTERNALOUTPUT||ntype == SELECTION) {
				readyQueue.insert(c);
				c.setState(Ready);
				break = True;
			} else {
				alternateQueue.insert(c);
			}
		}
		while(not(break)) {
			N c = alternateQueue.poll();
			State state = c.getState();
			c.runNode();
			Bool b = c.isBlocked();
			if(not(b)) {
				this.evaluateChildNodes(c);
				break = True;
			} else {
				n.setState(Blocked);
				alternateQueue.insert(c);
			}
			suspend;
		}
	}
	
	Unit evaluateChildNodes(N n) {
		List<N> l = n.getNodes();
		while(l != Nil) {
			N c = head(l);
			l = tail(l);
			Operator op = c.getOperator();
			String typeB = c.getBlockType();
			String pc = c.getPC();
			IO io = new IOImpl();
			io.print("The block is "+typeB+" "+pc);
			if(typeB == "PARALLELBLOCK") {
				this.evaluateChildNodes(c);
			} else if (typeB=="ALTERNATIVEBLOCK") {
				this.processAlternateBlock(c);
			} else {
				if(op == NOOPERATOR) {
					BehaviorType ntype = c.getBehaviorType();
					if(ntype == STATE||ntype==INTERNALOUTPUT||ntype==EXTERNALOUTPUT||ntype == SELECTION) {
						readyQueue.insert(c);
						c.setState(Ready);
					} else if(ntype == GUARD||ntype==INTERNALINPUT||ntype==EXTERNALINPUT) {
						c.setState(Blocked);
						io.print("Ini block");
						blockedQueue.insert(c);
					}
				} else if(op == REVERSION) {
					readyQueue.insert(c);
					c.setState(Ready);
				}
			}
		}
	}
	
	Unit start() {
		BehaviorType ntype = rNode.getBehaviorType();
		if(ntype == STATE||ntype==INTERNALOUTPUT||ntype==EXTERNALOUTPUT||ntype == SELECTION) {
			readyQueue.insert(rNode);
			rNode.setState(Ready);
		} else if(ntype == GUARD||ntype==INTERNALINPUT||ntype==EXTERNALINPUT) {
			rNode.setState(Blocked);
			blockedQueue.insert(rNode);
		}
	}
	Unit execute() {
		Int rQSize = readyQueue.size();
		Int bQSize = blockedQueue.size();
		IO io = new IOImpl();
		while(rQSize != 0 || bQSize != 0) {
			Fut<Unit> a = this!readyProcess();
			Fut<Unit> b = this!evaluateBlockedProcess();
			await a?;
			await b?;
			
			rQSize = readyQueue.size();
		    bQSize = blockedQueue.size();
		}
		io.print("This will always printed last");
	}
	
	Unit run() {
		readyQueue = new QueueNodeImpl();
		blockedQueue = new QueueNodeImpl();
		this.start();
		this.execute();
	}
}